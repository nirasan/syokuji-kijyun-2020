package main

import (
	"fmt"
	"strings"

	"github.com/nirasan/syokuji-kijyun-2020/data"
	"github.com/nirasan/syokuji-kijyun-2020/tools"
)

func Potassium(output string) {
	lines := strings.Split(potassiumSrc, "\n")
	ages := [][]data.Age{
		{{Month: 0}, {Month: 5}},
		{{Month: 6}, {Month: 11}},
		{{Year: 1}, {Year: 2}},
		{{Year: 3}, {Year: 5}},
		{{Year: 6}, {Year: 7}},
		{{Year: 8}, {Year: 9}},
		{{Year: 10}, {Year: 11}},
		{{Year: 12}, {Year: 14}},
		{{Year: 15}, {Year: 17}},
		{{Year: 18}, {Year: 29}},
		{{Year: 30}, {Year: 49}},
		{{Year: 50}, {Year: 64}},
		{{Year: 65}, {Year: 74}},
		{{Year: 75}, {Year: 100}},
	}

	list := make([]data.Potassium, 0)
	for i := 0; i <= 13; i++ {
		line := lines[i]
		line = strings.ReplaceAll(line, ",", "")
		line = strings.ReplaceAll(line, " 以上", "")
		cols := strings.Split(line, " ")
		j := len(cols) - 4
		a := ages[i]
		list = append(list,
			newPotassium(data.GenderMale, a[0], a[1], data.OptionNone, cols[j:j+2]),
			newPotassium(data.GenderFemale, a[0], a[1], data.OptionNone, cols[j+2:j+4]),
		)
	}

	list2 := make([]data.Potassium, 0)
	for _, d := range list {
		if d.Gender != data.GenderFemale {
			continue
		}
		list2 = append(list2,
			newPotassiumWithOption(d, data.OptionEarlyPregnancy),
			newPotassiumWithOption(d, data.OptionMidPregnancy),
			newPotassiumWithOption(d, data.OptionLatePregnancy),
			newPotassiumWithOption(d, data.OptionBreastfeeding),
		)
	}

	list = append(list, list2...)

	g := tools.NewGenerator()
	g.MustWrite("// Code generated by \"cmd/generator/main.go\"; DO NOT EDIT.\n")
	g.MustWrite("package data\n")
	g.MustWrite("func PotassiumList() []Potassium {\n")
	g.MustWrite("    return []Potassium {\n")
	for _, d := range list {
		s := fmt.Sprintf("%#v,\n", d)
		s = strings.ReplaceAll(s, "data.", "")
		g.MustWrite(s)
	}
	g.MustWrite("    }\n")
	g.MustWrite("}\n")

	g.Generate(output)
}

func newPotassium(g data.Gender, from, to data.Age, o data.Option, cols []string) data.Potassium {
	return data.Potassium{
		Gender: g,
		From:   from,
		To:     to,
		Option: o,
		AI:     data.NilFloatFromString(cols[0]),
		DG:     data.NilFloatFromString(cols[1]),
	}
}

func newPotassiumWithOption(in data.Potassium, o data.Option) data.Potassium {
	d := data.Potassium{
		Gender: in.Gender,
		From:   in.From,
		To:     in.To,
		Option: o,
		AI:     in.AI,
		DG:     in.DG,
	}
	var ai, dg float64
	switch o {
	case data.OptionEarlyPregnancy, data.OptionMidPregnancy, data.OptionLatePregnancy:
		ai, dg = 2000, 2600
	case data.OptionBreastfeeding:
		ai, dg = 2200, 2600
	}
	if d.AI.Valid {
		d.AI.Float = ai
	}
	if d.DG.Valid {
		d.DG.Float = dg
	}
	return d
}

// PDF 314 ページの「カリウムの食事摂取基準」のコピペ
const potassiumSrc = `0 ～ 5 （月） 400 ─ 400 ─
6 ～11（月） 700 ─ 700 ─
1 ～ 2 （歳） 900 ─ 900 ─
3 ～ 5 （歳） 1,000 1,400 以上 1,000 1,400 以上
6 ～ 7 （歳） 1,300 1,800 以上 1,200 1,800 以上
8 ～ 9 （歳） 1,500 2,000 以上 1,500 2,000 以上
10～11（歳） 1,800 2,200 以上 1,800 2,000 以上
12～14（歳） 2,300 2,400 以上 1,900 2,400 以上
15～17（歳） 2,700 3,000 以上 2,000 2,600 以上
18～29（歳） 2,500 3,000 以上 2,000 2,600 以上
30～49（歳） 2,500 3,000 以上 2,000 2,600 以上
50～64（歳） 2,500 3,000 以上 2,000 2,600 以上
65～74（歳） 2,500 3,000 以上 2,000 2,600 以上
75 以上（歳） 2,500 3,000 以上 2,000 2,600 以上
妊　婦 2,000 2,600 以上
授乳婦 2,200 2,600 以上`
