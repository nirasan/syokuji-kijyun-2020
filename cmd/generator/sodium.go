package main

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/nirasan/syokuji-kijyun-2020/data"
	"github.com/nirasan/syokuji-kijyun-2020/tools"
)

func Sodium(output string) {
	lines := strings.Split(sodiumSrc, "\n")
	ages := [][]data.Age{
		{{Month: 0}, {Month: 5}},
		{{Month: 6}, {Month: 11}},
		{{Year: 1}, {Year: 2}},
		{{Year: 3}, {Year: 5}},
		{{Year: 6}, {Year: 7}},
		{{Year: 8}, {Year: 9}},
		{{Year: 10}, {Year: 11}},
		{{Year: 12}, {Year: 14}},
		{{Year: 15}, {Year: 17}},
		{{Year: 18}, {Year: 29}},
		{{Year: 30}, {Year: 49}},
		{{Year: 50}, {Year: 64}},
		{{Year: 65}, {Year: 74}},
		{{Year: 75}, {Year: 100}},
	}

	list := make([]data.Sodium, 0)
	for i := 0; i <= 13; i++ {
		line := lines[i]
		if re, err := regexp.Compile(`）(\d)`); err == nil {
			line = re.ReplaceAllString(line, "） $1")
		}
		line = strings.ReplaceAll(line, "）", "")
		line = strings.ReplaceAll(line, " 未満", "")

		cols := strings.Split(line, " ")

		j := len(cols) - 6
		a := ages[i]
		list = append(list,
			newSodium(data.GenderMale, a[0], a[1], data.OptionNone, cols[j:j+3]),
			newSodium(data.GenderFemale, a[0], a[1], data.OptionNone, cols[j+3:j+6]),
		)
	}

	list2 := make([]data.Sodium, 0)
	for _, d := range list {
		if d.Gender != data.GenderFemale {
			continue
		}
		list2 = append(list2,
			newSodiumWithOption(d, data.OptionEarlyPregnancy),
			newSodiumWithOption(d, data.OptionMidPregnancy),
			newSodiumWithOption(d, data.OptionLatePregnancy),
			newSodiumWithOption(d, data.OptionBreastfeeding),
		)
	}

	list = append(list, list2...)

	g := tools.NewGenerator()
	g.MustWrite("// Code generated by \"cmd/generator/main.go\"; DO NOT EDIT.\n")
	g.MustWrite("package data\n")
	g.MustWrite("func SodiumList() []Sodium {\n")
	g.MustWrite("    return []Sodium {\n")
	for _, d := range list {
		s := fmt.Sprintf("%#v,\n", d)
		s = strings.ReplaceAll(s, "data.", "")
		g.MustWrite(s)
	}
	g.MustWrite("    }\n")
	g.MustWrite("}\n")

	g.Generate(output)
}

func newSodium(g data.Gender, from, to data.Age, o data.Option, cols []string) data.Sodium {
	d := data.Sodium{
		Gender: g,
		From:   from,
		To:     to,
		Option: o,
	}
	if f1, f2, ok := parseSodiumValue(cols[0]); ok {
		d.EAR = f1
		d.EARSalt = f2
	}
	if f1, f2, ok := parseSodiumValue(cols[1]); ok {
		d.AI = f1
		d.AISalt = f2
	}
	dg := strings.ReplaceAll(cols[2], "（", "")
	d.DGSalt = data.NilFloatFromString(dg)
	return d
}

func parseSodiumValue(s string) (data.NilFloat, data.NilFloat, bool) {
	pair := strings.Split(s, "（")
	if len(pair) != 2 {
		return data.NilFloat{}, data.NilFloat{}, false
	}
	return data.NilFloatFromString(pair[0]), data.NilFloatFromString(pair[1]), true
}

func newSodiumWithOption(in data.Sodium, o data.Option) data.Sodium {
	d := data.Sodium{
		Gender: in.Gender,
		From:   in.From,
		To:     in.To,
		Option: o,
		EAR:    in.EAR,
		AI:     in.AI,
	}
	var ear, earsalt, dg float64
	switch o {
	case data.OptionEarlyPregnancy, data.OptionMidPregnancy, data.OptionLatePregnancy, data.OptionBreastfeeding:
		ear, earsalt, dg = 600, 1.5, 6.5
	}
	if d.EAR.Valid {
		d.EAR.Float = ear
	}
	if d.EARSalt.Valid {
		d.EARSalt.Float = earsalt
	}
	if d.DGSalt.Valid {
		d.DGSalt.Float = dg
	}
	return d
}

// PDF 313 ページの「ナトリウムの食事摂取基準」のコピペ
const sodiumSrc = `0 ～ 5 （月） ─ 100（0.3） ─ ─ 100（0.3） ─
6 ～11（月） ─ 600（1.5） ─ ─ 600（1.5） ─
1 ～ 2 （歳） ─ ─ （3.0 未満） ─ ─ （3.0 未満）
3 ～ 5 （歳） ─ ─ （3.5 未満） ─ ─ （3.5 未満）
6 ～ 7 （歳） ─ ─ （4.5 未満） ─ ─ （4.5 未満）
8 ～ 9 （歳） ─ ─ （5.0 未満） ─ ─ （5.0 未満）
10～11（歳） ─ ─ （6.0 未満） ─ ─ （6.0 未満）
12～14（歳） ─ ─ （7.0 未満） ─ ─ （6.5 未満）
15～17（歳） ─ ─ （7.5 未満） ─ ─ （6.5 未満）
18～29（歳） 600（1.5） ─ （7.5 未満）600（1.5） ─ （6.5 未満）
30～49（歳） 600（1.5） ─ （7.5 未満）600（1.5） ─ （6.5 未満）
50～64（歳） 600（1.5） ─ （7.5 未満）600（1.5） ─ （6.5 未満）
65～74（歳） 600（1.5） ─ （7.5 未満）600（1.5） ─ （6.5 未満）
75 以上（歳） 600（1.5） ─ （7.5 未満）600（1.5） ─ （6.5 未満）
妊　婦 600（1.5） ─ （6.5 未満）
授乳婦 600（1.5） ─ （6.5 未満）`
